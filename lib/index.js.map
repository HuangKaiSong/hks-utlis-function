{"version":3,"sources":["index.js","function/arrUtils.js","function/debounce.js","function/throttle.js","function/tiimeFrom.js","function/validate.js"],"names":["model","install","Vue","Object","keys","context","default","forEach","item","assign","prototype","$hks","window","use","installed","group","arr","key","reduce","t","v","push","flatMap","pre","cur","concat","Array","isArray","uniq","includes","objSum","prev","module","exports","keysDiff","hash","ss","difference","oarr","timeout","debounce","func","wait","immediate","clearTimeout","callNow","setTimeout","timer","flag","throttle","timeFormat","dateTime","fmt","Number","Date","toString","length","date","ret","opt","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","k","RegExp","exec","replace","padStart","timeFrom","format","timestamp","tips","parseInt","validEmail","str","test"],"mappings":"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","file":"index.js","sourceRoot":"../packages","sourcesContent":["import * as context from './function/*.js'\n\nlet model = {}\nconst install = Vue => {\n  Object.keys(context.default).forEach(item => {\n    Object.assign(model, context.default[item])\n  })\n\n  Vue.prototype.$hks = model\n}\n\nexport default install\n\nif (typeof window !== 'undefined' && window.Vue) {\n  window.Vue.use(install);\n  if (install.installed) {\n    install.installed = false;\n  }\n}\n","/**\n * 数组分组\n *\n * @param arr Array 进行便利的数组\n * @param key string\n * @return {*}\n * @constructor\n */\nconst group = (arr = [], key) => {\n    return key ? arr.reduce((t, v) => (!t[v[key]] && (t[v[key]] = []), t[v[key]].push(v), t), {}) : {};\n}\n\n/**\n * 多维数组转为一维数组\n * @param arr\n * @return {*}\n */\nconst flatMap = (arr) => {\n    return arr.reduce((pre,cur)=>pre.concat(Array.isArray(cur)?flatMap(cur):cur),[])\n}\n\n/**\n * 数组去重\n *\n * @param arr\n * @return {*}\n * @constructor\n */\nconst uniq = (arr = []) => {\n    return arr.reduce((t, v) => t.includes(v) ? t : [...t, v], []);\n}\n\n/**\n * 对象里的属性求和\n * @param arr\n * @param key\n */\nconst objSum = (arr, key) => arr.reduce((prev, cur) => cur[key] + prev, 0)\n\nmodule.exports = {\n    /**\n     * 根据键名过滤数组\n     *\n     * @param arr Array 要进行便利的数组\n     * @param key String 键名\n     * @return {*} Array\n     */\n    keysDiff: function (arr = [], key) {\n        let hash = {}\n        return arr.reduce((ss, item) => {\n            hash[item[key]] ? '' : (hash[item[key]] = true && ss.push(item));\n            return ss;\n        }, []);\n    },\n    /**\n     * 数组过滤\n     *\n     * @param arr Array 要进行便利的数组\n     * @param oarr Array 便利的规则1\n     * @return {*} Array\n     * @constructor\n     */\n    difference: function (arr = [], oarr = []) {\n        return arr.reduce((t, v) => (!oarr.includes(v) && t.push(v), t), []);\n    },\n    uniq,\n    group,\n    flatMap,\n    objSum,\n}\n\n","let timeout = null\n\n/**\n * 防抖原理：一定时间内，只有最后一次操作，再过wait毫秒后才执行函数\n *\n * @param {Function} func 要执行的回调函数\n * @param {Number} wait 延时的时间\n * @param {Boolean} immediate 是否立即执行\n * @return null\n */\nexport function debounce(func, wait = 500, immediate = false) {\n  // 清除定时器\n  if (timeout !== null) clearTimeout(timeout)\n  // 立即执行，此类情况一般用不到\n  if (immediate) {\n    var callNow = !timeout\n    timeout = setTimeout(function() {\n      timeout = null\n    }, wait)\n    if (callNow) typeof func === 'function' && func()\n  } else {\n    // 设置定时器，当最后一次操作后，timeout不会再被清除，所以在延时wait毫秒后执行func回调方法\n    timeout = setTimeout(function() {\n      typeof func === 'function' && func()\n    }, wait)\n  }\n}\n","// eslint-disable-next-line no-unused-vars\nlet timer, flag\n/**\n * 节流原理：在一定时间内，只能触发一次\n *\n * @param {Function} func 要执行的回调函数\n * @param {Number} wait 延时的时间\n * @param {Boolean} immediate 是否立即执行\n * @return null\n */\nexport function throttle(func, wait = 500, immediate = true) {\n  if (immediate) {\n    if (!flag) {\n      flag = true\n      // 如果是立即执行，则在wait毫秒内开始时执行\n      typeof func === 'function' && func()\n      timer = setTimeout(() => {\n        flag = false\n      }, wait)\n    }\n  } else {\n    if (!flag) {\n      flag = true\n      // 如果是非立即执行，则在wait毫秒内的结束处执行\n      timer = setTimeout(() => {\n        flag = false\n        typeof func === 'function' && func()\n      }, wait)\n    }\n  }\n}\n","// 其他更多是格式化有如下:\n// yyyy:mm:dd|yyyy:mm|yyyy年mm月dd日|yyyy年mm月dd日 hh时MM分等,可自定义组合\nexport function timeFormat(dateTime = null, fmt = 'yyyy-mm-dd') {\n  // 如果为null,则格式化当前时间\n  if (!dateTime) dateTime = Number(new Date())\n  // 如果dateTime长度为10或者13，则为秒和毫秒的时间戳，如果超过13位，则为其他的时间格式\n  if (dateTime.toString().length == 10) dateTime *= 1000\n  const date = new Date(dateTime)\n  let ret\n  const opt = {\n    'y+': date.getFullYear().toString(), // 年\n    'm+': (date.getMonth() + 1).toString(), // 月\n    'd+': date.getDate().toString(), // 日\n    'h+': date.getHours().toString(), // 时\n    'M+': date.getMinutes().toString(), // 分\n    's+': date.getSeconds().toString() // 秒\n    // 有其他格式化字符需求可以继续添加，必须转化成字符串\n  }\n  for (const k in opt) {\n    ret = new RegExp('(' + k + ')').exec(fmt)\n    if (ret) {\n      fmt = fmt.replace(ret[1], (ret[1].length == 1) ? (opt[k]) : (opt[k].padStart(ret[1].length, '0')))\n    }\n  }\n  return fmt\n}\n\n/**\n * 时间戳转为多久之前\n * @param String timestamp 时间戳\n * @param String | Boolean format 如果为时间格式字符串，超出一定时间范围，返回固定的时间格式；\n * 如果为布尔值false，无论什么时间，都返回多久以前的格式\n */\nexport function timeFrom(dateTime = null, format = 'yyyy-mm-dd') {\n  // 如果为null,则格式化当前时间\n  if (!dateTime) dateTime = Number(new Date())\n  // 如果dateTime长度为10或者13，则为秒和毫秒的时间戳，如果超过13位，则为其他的时间格式\n  if (dateTime.toString().length == 10) dateTime *= 1000\n  const timestamp = +new Date(Number(dateTime))\n\n  const timer = (Number(new Date()) - timestamp) / 1000\n  // 如果小于5分钟,则返回\"刚刚\",其他以此类推\n  let tips = ''\n  switch (true) {\n    case timer < 300:\n      tips = '刚刚'\n      break\n    case timer >= 300 && timer < 3600:\n      tips = parseInt(timer / 60) + '分钟前'\n      break\n    case timer >= 3600 && timer < 86400:\n      tips = parseInt(timer / 3600) + '小时前'\n      break\n    case timer >= 86400 && timer < 2592000:\n      tips = parseInt(timer / 86400) + '天前'\n      break\n    default:\n      // 如果format为false，则无论什么时间戳，都显示xx之前\n      if (format === false) {\n        if (timer >= 2592000 && timer < 365 * 86400) {\n          tips = parseInt(timer / (86400 * 30)) + '个月前'\n        } else {\n          tips = parseInt(timer / (86400 * 365)) + '年前'\n        }\n      } else {\n        tips = timeFormat(timestamp, format)\n      }\n  }\n  return tips\n}\n\n\n","/**\n * 是否是邮箱\n * @param {string} str\n * @returns {Boolean}\n */\nexport function validEmail(str) {\n  return /^([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+@([a-zA-Z0-9]+[_|\\_|\\.]?)*[a-zA-Z0-9]+\\.[a-zA-Z]{2,3}$/.test(str)\n}\n"]}